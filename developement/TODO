* Directrices sobre Información Derivada:
    - Siempre que sea posible, implementar message handlers en vez de funciones para obtener información
    derivada de una carta o de la relación entre dos cartas independiente del estado del programa

* Directrices de Manejo de eventos:
    - Asociar al evento la clase que sufre el cambio al desatar dicho evento en el identificador
    - Un manejador de eventos debe finalizar todo evento: si está defuseado lo ignora (ya está
    terminado). Si no lo está y cumple las demás condiciones para llevar a cabo su función
    con normalidad se sigue el manejo normal y se declara como finalizado. Si no está defuseado
    pero tampoco cumple todas las condiciones para su correcto funcionamiento, el propio manejador de eventos debe encargarse de defusearlo.
 
* Directrices sobre Información Primaria:
    Descripción:
    - Los objetos del juego deben dividir sus propiedades en tres tipos (identificativas, cualitativas y de estado).
    Las identificativas sirven para identificar unívocamente al objeto; por tanto, no deben modificarse
    en ningún momento durante el trascurso del programa. Las cualitativas y de estado describen las cualidades del 
    objeto, las cuáles están sujetas a cambios durante el programa. Las cualitativas describen características
    que sí pueden depender del contexto donde se pregunten (Ex. La piedra del arca asegura 2 MP a cualquier personaje,
    pero si el personaje que la porta es enano da 5 MP) mientras que las de estado describen propiedades
    que cambian en el programa pero son iguales independientemente del contexto (Ex. Saber si un personaje
    está girado o no, no depende del contexto donde se pregunte, sólo del estado del personaje).
    Necesidades de la Implementación:
    - El contexto del programa se describe como un set de ítems de información que conforman las modificaciones
    pertinentes al valor crudo cada propiedad cualitativa de los objetos.
    - Las peticiones de información o intento de acceso de lectura a las variables identificativas y de estado 
    pueden hacerse de cualquier manera deseada, ya que el resultado es al menos consistente (no depende de cómo
    se pregunte).
    - Las peticiones de información o intento de acceso de lectura a las variables cualitativas deben SIEMPRE
    llevarse a cabo mediante el manejador de mensajes get- asociado. Este será el que coleccione e interprete
    los ítem de información y el valor crudo del objeto para elaborar una respuesta final.
    - Como toda modificación de los valores crudos se representa como un ítem de información asociado a la
    variable, TODOS los campos de los objetos deben ser CONSTANTES.
    Implementación:
    - Las propiedades identificativas deben ser CONSTANTES del objeto
    - Las propiedades de estado deben ser VARIABLES del objeto
    - Las propiedades cualitativas deben ser llamadas al manejador de mensaje get- del objeto para esa cualidad

* Sistema de query de atributos:
    - Una regla gestiona cada modificador de atributo
    - El get- message handler de cada atributo de la clase debe modificarse con los modificadores existentes
    - Las reglas de gestión no deben ser conscientes de cuándo han sido leídas


* Propiedades Primarias:
        CLASE       PROPIEDAD           RANGO DE VALORES
    --------------------------------------------------------
    - CHARACTER     birthplace
    - LOCATION      enemy-draw
    - PLAYER        general-influence
    - CHARACTER     direct-influence
    - CHARACTER     mind
    - CHARACTER     player
    - FELLOWSHIP    player
    - HAND          player
    - R-LONG-EVENT  player
    - LOCATION      player-draw
    - CHARACTER     race
    - CARD          tap                 (TAPPED)
    - CHARACTER     tap                 (TAPPED WOUNDED)
    - ALLY          tap                 (TAPPED WOUNDED)


* Message Handlers:
    Propiedades Derivadas:
        CLASE       MESSAGE-HANDLER     DESCRIPCIÓN
    --------------------------------------------------------------------------------
    - FELLOWSHIP    has-room            False si no queda espacio para un 
                                        personaje en la compañía
    - ALL           is-a                Devuelve la lista de clases del objeto
    - FELLOWHSIP    is-empty            False si contiene algún personaje
    - LOCATION      is-haven            False si no es un refugio
    - 

* Events:
        CLASE       EVENT                           DESCRIPCIÓN
    ---------------------------------------------------------------------------
    - CHARACTER     cure target                 Cura el personaje
    - ALLY          cure target                 Cura el aliado
    - A-LONG-EVENT  discard target              Descarta la adversidad suceso duradero
    - R-LONG-EVENT  discard target              Descarta el recurso suceso duradero
    - HAND          draw player                 Roba una carta
    - FELLOWSHIP    EP-move fell from           Inicia la fase de evento "movimiento"
    - FELLOWSHIP    move fell from to           Mueve la compañía al lugar indicado
    - HAND          multiple-draw player max    El personaje puede elegir robar una a una
                                                hasta max cartas
    - CHARACTER     play target under           Juega el personaje bajo esa compañía
    - CHARACTER     play target under           Juega el personaje como seguidor del otro
    - R-LONG-EVENT  play target                 Juega el recurso suceso duradero
    - HAND          refill player               Evento de fase eventual para descartar/robar
                                                hasta tener la cantidad de cartas estipulada
    - LOCATION      reorganize player loc       Reorganiza las compañías del jugador
                                                en la localización
    - FELLOWSHIP    stay fell                   La compañía se queda en este turno
    - OBJECT        store obj                   Almacena el objeto
    - OBJECT        transfer obj disposer 
                        receiver                Transfiere el objeto del disposer al
                                                receiver
    - CARD          untap target                Endereza la carta (no localizacion)


* Funciones:
    Propiedades Derivadas:
    - 
* Módulo con variables globales:
    - Descripción de fases
    - Saliencia según el sistema

* Árbol de herencia de las características básicas de las clases para poder concluir las **reglas mínimas de juego**

* Hacer que el jugador puede elegir el orden en el que se mueven sus compañías

* Gestionar: ACCIONES, CADENAS DE EFECTOS de las instrucciones (pista: salience no constante
y revisada en tiempo de ejecución)

* SE PUEDE HACER QUE EL JUGADOR Y SU MANO SEAN LA MISMA COSA?

* Que se creen compañías vacías al iniciar la fase eventual reorganizar compañía y se eliminen
al terminar la fase eventual

* Función que imprima constantemente el estado del juego (muy complejo)

* Definir qué debe exportarse y qué no del paquete TOOLS

* Traducir y encapsular todo a sistema de módulo según la plantilla

* Crear una subclase de EVENT-PHASE para cada fase eventual con los argumentos extra
que necesite

* Revisar el sistema de saliencia de los módulos (evitar conflicto de underflowing/overflowing
entre saliencias de distintos hilos de ejecución del mismo módulo, mientras se garantiza la
preferencia de saliencias definidas para clock, event-handler, phase-rules, action-population...)

* Crear plantilla para modelo de mini-reloj personalizado para cada módulo







DONE:   Gestionar elemento de jugador actual y enemigo actual, hasta ahora se está sustituyendo por [player1] y      [player2] respectivamente

DONE: Reglas para que cuando un objeto salga del juego (esté en mano, baraja, MP o descarte) desaparezca su localizador IN directo correspondiente

DONE:   Eliminar el archivo phase-2-3-0.clp, ya que su evento ha sido sustituido por otro

DONE:   En la regla post-draw, revisar que todas las cartas sean del jugador [player1]

DONE: Hacer que se resuelvan los eventos, primero los primeros que entren, para que tenga sentido la escritura secuencial de los eventos, cambiando la estrategia de resolución de conflictos

Una ventaja de hacer módulos que dividan las competencias de MAIN es que sí podría darse la combinación in-transitive/"some-phase-rule"/event-handler. Ahora mismo, al cambiar el foco,
como no se devuelve al acabar la función por regla general, ocurre que a pesar de tener una saliencia hipotéticamente inferior, el event-handler ocurriría antes que el "some-phase-rule", ya que no necesita del AUTO-FOCUS, que sí respeta el foco original

Hay eventos complejos que deben sucederse unos detrás de otros, donde la finalización de uno implica el inicio del siguiente. Ocurre que si una única regla aserta las instancias de eventos, puede ocurrir que cierto evento sea cancelado y que ocurra después otro que para tener consistencia, necesite del anterior. Ahora mismo, los eventos son incorrelados. Hacer un campo con la info de los eventos subyacentes comprimidos, que se activen automáticamente al completar el evento que los contiene. Así se puede conseguir una correlación entre los eventos que ahora mismo sólo se diseña con la estrategia de resolución de conflictos

DONE:   Todos los slots de cada clase deberían tener la etiqueta (source composite) para que se hereden facetas de la clase padre

DONE:   Manejar que no existan dos eventos de tipo move-fellowship (eliminar la anterior en la consecuencia de crear la segunda) para una misma compañía

DONE:   Terminar módulo para un chequeo de corrupción (compleción del evento)

DONE:   Módulo para la organización de una compañía

DONE:   Especificación de clase refugio

Formalizar la plantilla "action-only", que sirve como parche para que los action se retracten una vez lanzados cuando su modulo forma parte de la pila de ejecución

Detallar las pautas para el tratamiento de los datos cualitativos

(gen-name) ------> name + (gen-sym* - "sym")

DONE:   En P-1-1-1 falta jugar personaje como seguidor

Generar una especie de evento de problema si se detecta que cambia alguna condicion necesaria del juego? Como que por cierto evento pierdas influencia en un personaje y por ende no pueda hacerse cargo de un seguidor de buenas a primeras

DONE:   Hacer division entre event phase a realizar ahora mismo (corruption check, organization ...) y los que son manejados más tarde (move-fellowship)
SOLUCION: lanzar el EVENT en el instante y dejar el handler para el momento de activacion del EVENT-PHASE del mismo nombre

DONE:   Revisar que antes de jugar un personaje, la compañia tenga siempre espacio

Definir dos tipos de reglas: las de unicidad (que se ejecutan una única vez por módulo) y las que están diseñadas para ejecutarse las veces necesarias mientras se cumplan las condiciones

Verificar que se haya puesto saliencia correcta en los event handler correspondientes

Si el personaje que controla el aliado abandona el juego, también tendrás que descartarlo.

Cinematica basada en imágenes superpuestas que facilitan la comprensión y dinamismo de las acciones y que se comporta correctamente con el planteamiento modular

DONE:   MP item para player

Sistema de apilado de fases eventuales o eventos en distintos tipos: unos tras otros, necesitando o no la compleción del predecesor para ejecutarse. Por ejemplo: para intentar jugarse una facción, primero se hace evento que gire al personaje "intento de jugar facción", luego otro que de completarse el anterior realice el chequeo de influencia "chequeo de influencia" y finalmente si se completa con éxito el anterior otro que ponga en juego la faccion "jugar faccion".
Otro modelo es el paralelo, por ejemplo: ejecutar dos eventos de ataque automático, donde el resultado de uno no determina la actuación del siguiente.

Hacer que cuando se defusee o termine una fase eventual se termine y vaya hacia abajo en el focus stack

Ordenar el focus stack para evitar que se intercalen focos de MAIN pero que se realicen con la prioridad que necesitan

Hacer que una vez el ataque de una criatura sea vencido, ponerlo en MP

Gestionar correctamente el borrado de eventos y fases eventuales terminadas, de forma que se eliminen justo antes de cambiar a la siguiente fase de igual o menor altura en la pila: debe durar para todas las subfases en su interior, pero no para la siguiente fase no subfase, es decir, debe durar mientras siga en el focus stack la fase donde inicio. Mejor eliminar literalmente en la ejecucion del reloj para evitar la ejecución del ciclo infinito en P-4

Representar las fases eventuales como posicionamiento espacial en el tablero

Nota: El poder de un personaje también se puede modificar al jugar ciertas cartas, pero solo se puede jugar una carta que requierauna habilidad en concreto (por ejemplo, una carta para Guerreros) contra un mismo golpe. Hacerlo mediante info items de sustraccion de caracter 