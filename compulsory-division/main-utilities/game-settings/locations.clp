; HAVENS
(defclass MAIN::RIVENDELL (is-a HAVEN)
    (slot closest-haven (default (symbol-to-instance-name rivendell)))
    (multislot site-paths (default (create$ [lorien] [grey-havens])))
)
(defclass MAIN::EDHELLOND (is-a LOCATION)
    (slot closest-haven (default (symbol-to-instance-name edhellond)))
    (multislot site-paths (default (create$ [lorien] [grey-havens])))
)
(defclass MAIN::GREY-HAVENS (is-a HAVEN)
    (slot closest-haven (default (symbol-to-instance-name grey-havens)))
    (multislot site-paths (default (create$ [rivendell] [edhellond])))
)
(defclass MAIN::LORIEN (is-a HAVEN)
    (slot closest-haven (default (symbol-to-instance-name lorien)))
    (multislot site-paths (default (create$ [rivendell] [edhellond])))
)

; OTHER LOCATIONS
(defclass MAIN::AMON-HEN (is-a LOCATION)
    (slot closest-haven (default (symbol-to-instance-name lorien)))
)
(defclass MAIN::BAG-END (is-a LOCATION)
    (slot closest-haven (default (symbol-to-instance-name rivendell)))
)
(defclass MAIN::BANDIT-LAIR (is-a LOCATION)
    (slot closest-haven (default (symbol-to-instance-name lorien)))
)
(defclass MAIN::BARAD-DUR (is-a LOCATION)
    (slot closest-haven (default (symbol-to-instance-name lorien)))
)
(defclass MAIN::BARROW--DOWNS (is-a LOCATION)
    (slot closest-haven (default (symbol-to-instance-name rivendell)))
)
(defclass MAIN::BEORNS-HOUSE (is-a LOCATION)
    (slot closest-haven (default (symbol-to-instance-name lorien)))
)

(deffunction MAIN::init-locations ()
    (debug Starting locations)

    (make-instance rivendell of RIVENDELL)
    (make-instance edhellond of EDHELLOND)
    (make-instance grey-havens of GREY-HAVENS)
    (make-instance lorien of LORIEN)

    (make-instance amon-hen of AMON-HEN)
    (make-instance bag-end of BAG-END)
    (make-instance bandit-lair of BANDIT-LAIR)
    (make-instance barad-dur of BARAD-DUR)
    (make-instance barrow--downs of BARROW--DOWNS)
    (make-instance beorns-house of BEORNS-HOUSE)

    (debug Locations started)
)